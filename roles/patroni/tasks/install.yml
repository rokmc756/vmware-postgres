---
# Install Patroni Cluster for RHEL/CentOS/Rocky 7.x and 8.x
#
- name: Add line into /etc/locale.conf for LC_TYPE to prevent error
  become: true
  lineinfile:
    path: /etc/locale.conf
    line: "LC_CTYPE=en_US.UTF-8"
  register: lctype_line_added

#
- name: Install the 'Development tools' and perl package group and others for VMware Postgres Dependencies
  become: true
  yum:
    name: "{{ item }}"
    state: present
  async: 180
  poll: 5
  with_items:
    - "perl"
    - "perl-libs"
    - "@Development tools"
    - "epel-release"
    - "firewalld"
    - "readline-devel"
    - "libicu-devel"
  register: vmware_postgres_depenecies_packages_installed
  when: install_dep_packages
#    - python-psycopg2
#    - python27-python-psycopg2
#    - python3-policycoreutils
#    - python2-libselinux
#    - libselinux-python2
#    - policycoreutils-python-utils
#    - libselinux-python3

#
- name: Stop and disable firewalld
  become: true
  systemd:
    name: firewalld
    state: stopped
    enabled: false
  register: firewalld_service_disabled

#
- name: Flush iptables rules
  become: true
  become_user: root
  shell: ( iptables -F )
  register: iptables_rules_flushed

#
- name: List iptables rules
  become: true
  become_user: root
  shell: ( iptables -nL )
  register: iptables_rules_listed

#
- name: Copy the VMware Postgres {{ major_version }} rpm package file to all nodes in workers
  copy:
    src: "{{ item }}"
    dest: "/home/jomoon/{{ item }}"
    mode: 0644
    owner: jomoon
    group: jomoon
  register: vmware_postgres_copied
  with_items:
    - "{{ package_name }}-{{ major_version }}.{{ minor_version }}-{{ patch_version }}.{{ rhel_version }}.x86_64.rpm"

#
- name: Copy ETCD {{ etcd_version }} rpm package for RHEL or Rocky 8 to all nodes in workers group
  copy:
    src: "{{ item }}"
    dest: "/home/jomoon/{{ item }}"
    mode: 0644
    owner: jomoon
    group: jomoon
  register: etcd_rpm_package_copied
  with_items:
    - "etcd-{{ etcd_version }}.{{ rhel_version }}.x86_64.rpm"
  when: hostvars[inventory_hostname].ansible_distribution_major_version|int == 8

#
- name: Copy the patroni rpm file to all hosts in cluster
  copy:
    src: "{{ item }}"
    dest: "/home/jomoon/{{ item }}"
    mode: 0644
    owner: jomoon
    group: jomoon
  register: patroni_rpm_package_copied
  with_items:
    - "{{ package_name }}-patroni-{{ patroni_version }}.{{ rhel_version }}.x86_64.rpm"
  when: with_patroni_pkg

#
- name: Install Patroni prerequisites rpm packages on all nodes in workers group for RHEL or CentOS {{  hostvars[inventory_hostname].ansible_distribution_major_version }}
  become: true
  yum:
    name: "{{ item }}"
    state: present
    skip_broken: yes
  async: 180
  poll: 5
  with_items:
    - python3
    - python3-libs
    - python3-devel
    - python3-setuptools
    - python3-rpm-generators
    - python3-PyYAML
    - python3-pathspec
    - gcc
    - yamllint
    - daemonize
  register: patroni_prereq_rpm_packages_installed
  when: install_dep_packages

# - python-psycopg2
# - etcd
# - python34
# - python34-libs
# - python34-setuptools
# - python36-PyYAML
# - python36-pathspec



#
- name: Install VMware Postgres RPM Package on all hosts as root
  become: true
  yum:
    name: "/home/jomoon/{{ item }}"
    state: present
    disable_gpg_check: yes
  async: 60
  poll: 5
  register: vmware_postgres_rpm_package_installed
  with_items:
    - "{{ package_name }}-{{ major_version }}.{{ minor_version }}-{{ patch_version }}.{{ rhel_version }}.x86_64.rpm"

#
- name: Install Patroni RPM Package in VMware Postgres on all hosts as root
  become: true
  yum:
    name: "/home/jomoon/{{ item }}"
    state: present
    disable_gpg_check: yes
  async: 60
  poll: 5
  register: paroni_rpm_package_installed
  with_items:
    - "{{ package_name }}-patroni-{{ patroni_version }}.{{ rhel_version }}.x86_64.rpm"
  when: with_patroni_pkg

#
- name: Make sure we have a 'wheel' group
  become: true
  group:
    name: wheel
    state: present
  register: wheel_group_added

#
- name: Allow 'wheel' group to have passwordless sudo
  become: true
  lineinfile:
    dest: /etc/sudoers
    state: present
    regexp: '^%wheel'
    line: '%wheel ALL=(ALL) NOPASSWD: ALL'
    validate: 'visudo -cf %s'
  register: wheel_group_allowed

#
- name: Check if .bash_profile exits under /var/lib/pgsql directory
  become: true
  become_user: postgres
  stat: path=/var/lib/pgsql/.bash_profile
  register: bash_profile_existed

#
- name: Sanity check for .bash_profile in /var/lib/pgsql
  become: true
  become_user: postgres
  shell: "{{ item }}"
  with_items:
    - "touch /var/lib/pgsql/.bash_profile"
    - "chmod 600 /var/lib/pgsql/.bash_profile"
  register: bash_profile_checked
  when:
    - bash_profile_existed.stat.exists == False

#
- name: Insert executable binary path into .bashrc for VMware Postgres {{ major_version }}
  become: true
  become_user: postgres
  lineinfile:
    path: /var/lib/pgsql/.bash_profile
    line: "export PATH={{ bin_dir }}:$PATH"
  register: bin_path_inline_added
  when:
    - bash_profile_existed.stat.exists == True
    - hostvars[inventory_hostname].ansible_distribution_major_version|int == 7
#
- name: Install the etcd and Patroni prerequisites on all three nodes for CentOS 7
  become: true
  yum:
    name: "{{ item }}"
    state: present
    skip_broken: yes
  async: 180
  poll: 5
  register: etcd_prereq_rpm_packages_installed
  with_items:
    - python-psycopg2
    - etcd
  when:
    - hostvars[inventory_hostname].ansible_distribution_major_version|int == 7
    - install_dep_packages

- name: Install ETCD rpm package on all nodes in workers group for RHEL or Rocky {{  hostvars[inventory_hostname].ansible_distribution_major_version }}
  become: true
  yum:
    name: "/home/jomoon/{{ item }}"
    state: present
    disable_gpg_check: yes
  async: 60
  poll: 5
  register: etcd_rpm_packages_installed
  with_items:
    - "etcd-{{ etcd_version }}.{{ rhel_version }}.x86_64.rpm"
  when: hostvars[inventory_hostname].ansible_distribution_major_version|int == 8

#
- name: Install ETCD and Patroni prerequisites rpm package on all nodes in workers group for RHEL or Rocky {{  hostvars[inventory_hostname].ansible_distribution_major_version }}
  become: true
  yum:
    name: "{{ item }}"
    state: present
    skip_broken: yes
  async: 180
  poll: 5
  with_items:
    - platform-python-pip
    - python39-pip
  register: etcd_patroni_prereq_rpm_packages_installed
  when:
    - hostvars[inventory_hostname].ansible_distribution_major_version|int == 8
    - install_dep_packages
# - python34
# - python34-libs
# - python34-setuptools
# - python36-PyYAML
# - python36-pathspec

#
- name: Install the python module of dependencies for ETCD on all nodes in workers group
  become: true
  become_user: postgres
  template: src=requirements.txt.{{ rhel_version }}.j2 dest=/var/lib/pgsql/requirements.txt owner=postgres group=postgres mode=644 force=yes
  register: patroni_prereq_installed

#
- name: Install python modlue for patroni
  become: true
  become_user: root
  shell: (  export PATH=$PATH:/usr/local/bin && pip3 install {{ item }} )
  async: 180
  poll: 5
  register: pip3_python_modules_installed
  with_items:
    - "setuptools-rust"
    - "typing"
    - "wheel"
    - "-r /var/lib/pgsql/requirements.txt"
  when: install_python_module

#
- name: Upgrade pip3 version
  become: true
  become_user: root
  shell: (  export PATH=$PATH:/usr/local/bin && pip3 install --upgrade pip )
  async: 60
  poll: 5
  register: pip_upgraded
  when: install_python_module

#
- name: Install python modules for Patroni in VMware Postgres {{ major_version }} on all nodes in workers group
  become: true
  become_user: root
  shell: ( export PATH=$PATH:/usr/local/bin && pip3 install {{ item }} )
  async: 60
  poll: 5
  register: pip3_python_modules_for_vmware_postgres_13_and_earlier_versions_installed
  with_items:
    - "psycopg2-binary"
  when:
    - major_version|int <= 13
    - install_python_module

#
- name: Install python modules for Patroni in VMware Postgres {{ major_version }} on all nodes in workers group
  become: true
  become_user: root
  shell: ( export PATH=$PATH:/usr/local/bin && pip3 install {{ item }} )
  async: 60
  poll: 5
  register: pip3_python_modules_for_vmware_postgres_14_and_higher_versions_installed
  with_items:
    - "pyopenssl"
    - "pyrsistent==0.16.0"
  when:
    - major_version|int >= 14
    - install_python_module

#
- name: Install prerequesties of python modules for Patroni
  become: true
  become_user: root
  shell: (  export PATH=$PATH:/usr/local/bin && pip3 install {{ item }} )
  async: 60
  poll: 5
  register: pip3_python_etcd_installed
  with_items:
    - "tzlocal"
    - "requests"
    - "ydiff"
    - "psutil"
    - "prettytable"
    - "click"
    - "python-etcd"
  when: install_python_module


#
- name: Create the etcd.yml configuration file for all nodes
  become: true
  become_user: postgres
  template: src=etcd.yml.j2 dest=/var/lib/pgsql/etcd.yml owner=postgres group=postgres mode=644 force=yes
  register: etcd_config_created

#
- name: Tune the value of HEARTBEAT INTERNAL and ELECTION TIMEOUT for etcd
  become: true
  replace:
    dest: /etc/etcd/etcd.conf
    regexp: "{{ item.regexp }}"
    replace: "{{ item.line }}"
  register: etcd_config_modified
  with_items:
    - { regexp: '#ETCD_HEARTBEAT_INTERVAL="1000"', line: 'ETCD_HEARTBEAT_INTERVAL="10000"', state: present }
    - { regexp: '#ETCD_ELECTION_TIMEOUT="10000"', line: 'ETCD_ELECTION_TIMEOUT="100000"', state: present }

#
- name: Copy systemd configuration of etcd into /etc/systemd/system
  become: true
  become_user: root
  template: src=etcd.systemd.j2 dest=/etc/systemd/system/etcd.service owner=root group=root mode=644 force=yes
  register: etcd_systemd_config_copied

#
- name: Reload and start etcd through systemd
  become: true
  systemd:
    daemon_reload: yes
    name: etcd
    enabled: yes
    state: started
  register: etcd_systemd_started

#
- name: Lists the members and identifies the current leader.
  become: true
  become_user: postgres
  shell: ( export ETCDCTL_API=3 && etcdctl member list )
  register: members_leader_listed

#
- name: Set data directory
  become: true
  become_user: postgres
  file: path=/var/lib/pgsql/patroni_data state=directory owner=postgres group=postgres
  register: data_directory_set

#
- name: Create the patroni.yml configuration file
  become: true
  become_user: postgres
  template: src=patroni.yml.j2 dest=/var/lib/pgsql/patroni.yml owner=postgres group=postgres mode=644 force=yes
  register: patroni_config_created

#
- name: Copy systemd configuration of patroni into /etc/systemd/system
  become: true
  become_user: root
  template: src=patroni.systemd.j2 dest=/etc/systemd/system/patroni.service owner=root group=root mode=644 force=yes
  register: patroni_systemd_config_copied

#
- name: Change the permissions on the database directory in /var/lib/pgsql directory
  become: true
  become_user: postgres
  file:
    path: "{{ item }}"
    state: directory
    mode: 0750
  register: data_directories_permission_changed
  with_items:
    - "/var/lib/pgsql/backups"
    - "/var/lib/pgsql/data"
    - "/var/lib/pgsql/patroni_data"
  when: major_version|int >= 11

#
- name: Change the permissions on the database directory in /var/lib/pgsql directory
  become: true
  become_user: postgres
  file:
    path: "{{ item }}"
    state: directory
    mode: 0700
  register: data_directories_permission_changed
  with_items:
    - "/var/lib/pgsql/backups"
    - "/var/lib/pgsql/data"
    - "/var/lib/pgsql/patroni_data"
  when: major_version|int < 11

#
- name: Change the permissions on the /tmp directory
  become: yes
  become_user: root
  file:
    path: /tmp
    state: directory
    mode: 0777
  register: tmp_dir_permission_changed

# Enable and Start services for patroni
- name: Reload and start systemd service of patroni
  become: true
  systemd:
    daemon_reload: yes
    name: patroni
    enabled: yes
    state: started
  register: patroni_systemd_service_reloaded

# Remove cluster
# shell: |
#   export LC_ALL=en_US.utf-8 && {{ patronictl_path }} -c /var/lib/pgsql/patroni.yml remove {{ cluster_name }} <<EOF
#   {{ cluster_name }}
#   Yes I am aware
#   EOF

# Reinitialize cluster
# shell: |
#   export LC_ALL=en_US.utf-8 && {{ patronictl_path }} -c /var/lib/pgsql/patroni.yml reinit {{ cluster_name }} <<EOF
#   {{ inventory_hostname }}
#   y
#   y
#   EOF

#
- name: Pause for 1 minutes to wait for compleiting initializaion of patroni cluster
  pause:
    minutes: 1

#
- name: Run the patronictl command-line utility to view the cluster state with Patroni started on all three nodes,
  become: true
  become_user: postgres
  shell: ( {{ patronictl_path }} -c /var/lib/pgsql/patroni.yml list )
  register: patroni_listed

#
- debug: msg={{ patroni_listed }}
  when: print_debug
