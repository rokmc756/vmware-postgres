---
# Install pg_auto_failover for RHEL or CentOS
#
- name: Verify that pg_auto_failover/postgres was installed properly
  become: true
  become_user: postgres
  shell: ( source /var/lib/pgsql/.bash_profile ; {{ bin_dir }}/pg_autoctl version )
  register: pg_autoctl_install_verified
  args:
    chdir: "/var/lib/pgsql"
    executable: /bin/bash

- name: Verify that pg_auto_failover/postgres was installed properly
  become: true
  become_user: postgres
  shell: ( source /var/lib/pgsql/.bash_profile ; {{ bin_dir }}/pg_ctl -V )
  register: pg_ctl_install_verified
  args:
    chdir: "/var/lib/pgsql"
    executable: /bin/bash

#- name: Getting process IDs of the pg_autoctl process
#  pids:
#    name: pg_autoctl
#  register: pids_of_pg_autoctl
#  ignore_errors: yes

#- name: Printing the process IDs obtained
#  debug:
#    msg: "PIDS of pg_autoctl:{{pids_of_pg_autoctl.pids|join(',')}}"
#  ignore_errors: yes
#  tags:
#    - print_debug

# - name: Getting process IDs of processes matching pattern
#  community.general.pids:
#    pattern: myapp(2(\.7)?|3(\.6)?)?\s+myapp\.py
#  register: myapp_pids
#  when: inventory_hostname in groups['monitor']

#- name: Stop pgautofailover service of systemd
#  become: true
#  systemd:
#    state: stopped
#    name: pgautofailover
#  register: pgautofailover_service_stopped
#  when:
#    - pids_of_pg_autoctl.pids|join(',') | length > 0

#- debug: msg={{ pgautofailover_service_stopped  }}
#  tags:
#    - print_debug

#- name: Drop the monitor node
#  become: yes
#  become_user: postgres
#  shell: ( export PGDATA=/var/lib/pgsql/data && pg_autoctl drop monitor --destroy --pgdata monitor )
#  ignore_errors: true
#  register: monitor_node_dropped
#  async: 180
#  poll: 5
#  when:
#    - inventory_hostname in groups['monitor']
#    - pgautofailover_service_stopped.status
#
#- dgebug: msg={{ monitor_node_dropped }}
#  when:
#    - inventory_hostname in groups['monitor']
#    - pgautofailover_service_stopped.status
#   tags: debug

#- name: Insert executable binary path into .bashrc for VMware Postgres {{ major_version }}
#  become: true
#  become_user: postgres
#  lineinfile:
#    path: /var/lib/pgsql/.bashrc
#    line: "export PATH={{ bin_dir }}:$PATH"

#- name: Set variable of PATH for VMware Postgres {{ major_version }}
#  become: true
#  become_user: postgres
#  shell: source /var/lib/pgsql/.bashrc

#
- name: Create monitor node
  become: true
  become_user: postgres
  shell: ( source /var/lib/pgsql/.bash_profile ; {{ bin_dir }}/pg_autoctl create monitor --auth trust --ssl-self-signed --pgdata /var/lib/pgsql/{{ monitor_database }} )
  register: monitor_node_created
  async: 300
  poll: 5
  register: pg_ctl_install_verified
  args:
    chdir: "/var/lib/pgsql"
    executable: /bin/bash

- name: Grant user access from network 192.168.0.0/24 access for access with cert authentication.
  become: true
  become_user: postgres
  postgresql_pg_hba:
    dest: /var/lib/pgsql/{{ monitor_database }}/pg_hba.conf
    contype: host
    users: all
    source: 192.168.0.0/24
    databases: all
    method: trust

#
- name: Create systemd service file of monitor instance
  become: true
  become_user: postgres
  shell: ( source /var/lib/pgsql/.bash_profile ; {{ bin_dir }}/pg_autoctl -q show systemd --pgdata /var/lib/pgsql/{{ monitor_database }} > /var/lib/pgsql/pgautofailover.service )
  register: systemd_service_added
  async: 180
  poll: 5
  args:
    chdir: "/var/lib/pgsql"
    executable: /bin/bash

#
- name: Copy systemd service file of monitor instance
  become: true
  become_user: root
  copy:
    src: /var/lib/pgsql/pgautofailover.service
    dest: /etc/systemd/system/
    owner: root
    group: root
    mode: 0644
    remote_src: true

- name: Reload and start systemd service of monitor instance
  become: true
  systemd:
    daemon_reload: yes
    enabled: yes
    state: started
    name: pgautofailover
  register: monitor_systemd_status

#
- name: Replace database directory
  become: true
  become_user: postgres
  replace:
    path: /var/lib/pgsql/.bash_profile
    regexp: '^(.*)PGDATA=(.*)$'
    replace: 'PGDATA=//var/lib/pgsql/data'
    backup: yes
  #  replace: 'PGDATA=//var/lib/pgsql/{{ monitor_database }}'

- name: Verify the current state of monitor instance
  become: true
  become_user: postgres
  shell: ( ps -ef | grep postgres )
  register: monitor_instance_state_verified
  # shell: ( ps -ef | grep postgres )

#
- name: Verify the current state of monitor
  become: true
  become_user: postgres
  shell: ( source /var/lib/pgsql/.bash_profile ; {{ bin_dir }}/psql -c "\l" )
  register: monitor_state_verified
  args:
    chdir: "/var/lib/pgsql"
    executable: /bin/bash

#
- debug: msg={{ monitor_state_verified }}
  tags:
    - print_debug
